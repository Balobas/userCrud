// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: crud.proto

package interfaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCrudClient is the client API for UserCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCrudClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	ArchiveUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error)
	RestoreUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error)
	GetUserByUID(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUsersByFIO(ctx context.Context, in *UserFIOParams, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUserByPhoneNumber(ctx context.Context, in *UserPhoneParams, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type userCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCrudClient(cc grpc.ClientConnInterface) UserCrudClient {
	return &userCrudClient{cc}
}

func (c *userCrudClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) ArchiveUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/ArchiveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) RestoreUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/RestoreUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) DeleteUser(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetUserByUID(ctx context.Context, in *UserUID, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/GetUserByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetUsersByFIO(ctx context.Context, in *UserFIOParams, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/GetUsersByFIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetUserByPhoneNumber(ctx context.Context, in *UserPhoneParams, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/userCRUD.UserCrud/GetUserByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCrudServer is the server API for UserCrud service.
// All implementations must embed UnimplementedUserCrudServer
// for forward compatibility
type UserCrudServer interface {
	CreateUser(context.Context, *User) (*CreateUserResponse, error)
	UpdateUser(context.Context, *User) (*Response, error)
	ArchiveUser(context.Context, *UserUID) (*Response, error)
	RestoreUser(context.Context, *UserUID) (*Response, error)
	DeleteUser(context.Context, *UserUID) (*Response, error)
	GetUserByUID(context.Context, *UserUID) (*GetUserResponse, error)
	GetUsersByFIO(context.Context, *UserFIOParams) (*GetUsersResponse, error)
	GetUserByPhoneNumber(context.Context, *UserPhoneParams) (*GetUserResponse, error)
	mustEmbedUnimplementedUserCrudServer()
}

// UnimplementedUserCrudServer must be embedded to have forward compatible implementations.
type UnimplementedUserCrudServer struct {
}

func (UnimplementedUserCrudServer) CreateUser(context.Context, *User) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserCrudServer) UpdateUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserCrudServer) ArchiveUser(context.Context, *UserUID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveUser not implemented")
}
func (UnimplementedUserCrudServer) RestoreUser(context.Context, *UserUID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUser not implemented")
}
func (UnimplementedUserCrudServer) DeleteUser(context.Context, *UserUID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserCrudServer) GetUserByUID(context.Context, *UserUID) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUID not implemented")
}
func (UnimplementedUserCrudServer) GetUsersByFIO(context.Context, *UserFIOParams) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByFIO not implemented")
}
func (UnimplementedUserCrudServer) GetUserByPhoneNumber(context.Context, *UserPhoneParams) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhoneNumber not implemented")
}
func (UnimplementedUserCrudServer) mustEmbedUnimplementedUserCrudServer() {}

// UnsafeUserCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCrudServer will
// result in compilation errors.
type UnsafeUserCrudServer interface {
	mustEmbedUnimplementedUserCrudServer()
}

func RegisterUserCrudServer(s grpc.ServiceRegistrar, srv UserCrudServer) {
	s.RegisterService(&UserCrud_ServiceDesc, srv)
}

func _UserCrud_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_ArchiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).ArchiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/ArchiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).ArchiveUser(ctx, req.(*UserUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_RestoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).RestoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/RestoreUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).RestoreUser(ctx, req.(*UserUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).DeleteUser(ctx, req.(*UserUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetUserByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetUserByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/GetUserByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetUserByUID(ctx, req.(*UserUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetUsersByFIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFIOParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetUsersByFIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/GetUsersByFIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetUsersByFIO(ctx, req.(*UserFIOParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetUserByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetUserByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userCRUD.UserCrud/GetUserByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetUserByPhoneNumber(ctx, req.(*UserPhoneParams))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCrud_ServiceDesc is the grpc.ServiceDesc for UserCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userCRUD.UserCrud",
	HandlerType: (*UserCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserCrud_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserCrud_UpdateUser_Handler,
		},
		{
			MethodName: "ArchiveUser",
			Handler:    _UserCrud_ArchiveUser_Handler,
		},
		{
			MethodName: "RestoreUser",
			Handler:    _UserCrud_RestoreUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserCrud_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserByUID",
			Handler:    _UserCrud_GetUserByUID_Handler,
		},
		{
			MethodName: "GetUsersByFIO",
			Handler:    _UserCrud_GetUsersByFIO_Handler,
		},
		{
			MethodName: "GetUserByPhoneNumber",
			Handler:    _UserCrud_GetUserByPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crud.proto",
}
